/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package server

import com.google.common.flogger.FluentLogger
import io.ktor.serialization.gson.gson
import io.ktor.server.application.ApplicationCall
import io.ktor.server.application.install
import io.ktor.server.engine.ApplicationEngine
import io.ktor.server.engine.embeddedServer
import io.ktor.server.html.respondHtml
import io.ktor.server.netty.Netty
import io.ktor.server.plugins.autohead.AutoHeadResponse
import io.ktor.server.plugins.callloging.CallLogging
import io.ktor.server.plugins.contentnegotiation.ContentNegotiation
import io.ktor.server.plugins.defaultheaders.DefaultHeaders
import io.ktor.server.plugins.statuspages.StatusPages
import server.pages.templates.root
import server.pages.views.errorView
import server.persistence.initDatabaseConnection

private val logger = FluentLogger.forEnclosingClass()

private var server: ApplicationEngine? = null

fun startServer() {
  logger.atInfo().log("Starting server")

  try {

    initDatabaseConnection()

    server =
        embeddedServer(Netty, host = "0.0.0.0", port = 8080) {
          install(ContentNegotiation) { gson() }

          install(DefaultHeaders) {
            header("X-Engine", "Ktor") // will send this header with each response
          }
          install(AutoHeadResponse)
          install(CallLogging)
          install(StatusPages) {
            exception<Throwable> { call, cause  ->
              call.respondHtml { root { errorView(cause) } }
            }
          }

          installRoutes()
        }

    server!!.start(wait = true)

    logger.atInfo().log("Server has exited")
  } catch (t: Throwable) {
    logger.atSevere().withCause(t).log("Server exited with an error")
    throw t
  }
}

fun main() = startServer()
